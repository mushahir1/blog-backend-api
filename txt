addProduct: async (req, resp) => {
        try {
            const { title, subtitle, description, stock, price, quantity, status, image, category, cloudinary } = req.body;
            const dbCategory = await Category.findById(category);
            if (!dbCategory) return resp.status(403).json({ message: 'Category Not Found or May be Category is Inactive' });
            const creatProduct = new Product({
                title, 
                subtitle,
                description,
                stock,
                price,
                quantity,
                status,
                image: cloudinary ? cloudinary : image,
                category
            });
            await creatProduct.save();
            dbCategory.products.push(creatProduct._id);
            await dbCategory.save();
            if (!creatProduct) {
                return resp.status(500).json({ error: 'Error Occured While adding Product' });
            }
            return resp.status(201).json({ message: "Product added successfully", product: creatProduct })
        } catch (error) {
            return resp.status(500).json({ error: error.message || 'Internal Server Error! ' });
        }
    },

// Create Product Validation
export const validateCreateProduct = [
    body('title')
        .notEmpty().withMessage('Title is required')
        .isLength({ min: 3, max: 20 }).withMessage('Title must be between 3 and 20 characters'),
    body('description').notEmpty().withMessage('Description is required'),
    body('image')
        .optional()
        .custom(async (value, { req }) => {
            if (!value) {
                return true; // Skiping validation if value is not provided means that image is not available
            }

            // Uploading the image to Cloudinary
            const uploadedImage = await cloudinary.v2.uploader.upload(value, { folder: 'blogs' });

            if (!uploadedImage) {
                throw new Error('Error while uploading image to cloudinary');
            }

            // Saving the Cloudinary image URL to req.body.image
            // console.log(uploadedImage.secure_url)
            req.body.cloudinary = uploadedImage.secure_url;

            return true;
        }),
    (req, res, next) => {
        const errors = validationResult(req);
        if (errors.isEmpty()) {
            return next();
        }
        const errMessage = errors.array().map(error => error.msg);
        return res.status(422).json({ message: errMessage });
    }
];